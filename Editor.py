# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Editor.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QIcon


class Ui_Editor(object):
    def setupUi(self, Editor):
        Editor.setObjectName("Editor")
        Editor.resize(1200, 1200)
        self.centralwidget = QtWidgets.QWidget(Editor)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.mdiArea = QtWidgets.QMdiArea(self.centralwidget)
        self.mdiArea.setObjectName("mdiArea")
        self.verticalLayout.addWidget(self.mdiArea)
        self.verticalLayout_3.addLayout(self.verticalLayout)
        Editor.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(Editor)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 844, 22))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        self.menu_2 = QtWidgets.QMenu(self.menubar)
        self.menu_2.setObjectName("menu_2")
        self.menu_3 = QtWidgets.QMenu(self.menubar)
        self.menu_3.setObjectName("menu_3")
        self.menu_4 = QtWidgets.QMenu(self.menubar)
        self.menu_4.setObjectName("menu_4")
        Editor.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(Editor)
        self.statusbar.setObjectName("statusbar")
        Editor.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(Editor)
        self.toolBar.setObjectName("toolBar")
        Editor.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.action_new = QtWidgets.QAction(Editor)
        self.action_new.setObjectName("action_new")
        self.action_open = QtWidgets.QAction(Editor)
        self.action_open.setObjectName("action_open")
        self.action_save = QtWidgets.QAction(Editor)
        self.action_save.setObjectName("action_save")
        self.action_saveas = QtWidgets.QAction(Editor)
        self.action_saveas.setObjectName("action_saveas")
        self.action_close = QtWidgets.QAction(Editor)
        self.action_close.setObjectName("action_close")
        self.action_about = QtWidgets.QAction(Editor)
        self.action_about.setObjectName("action_about")
        self.actionpile = QtWidgets.QAction(Editor)
        self.actionpile.setObjectName("actionpile")
        self.actionhori = QtWidgets.QAction(Editor)
        self.actionhori.setObjectName("actionhori")
        self.actionverti = QtWidgets.QAction(Editor)
        self.actionverti.setObjectName("actionverti")
        self.actioncut = QtWidgets.QAction(Editor)
        self.actioncut.setObjectName("actioncut")
        self.actioncopy = QtWidgets.QAction(Editor)
        self.actioncopy.setObjectName("actioncopy")
        self.actionpaste = QtWidgets.QAction(Editor)
        self.actionpaste.setObjectName("actionpaste")
        self.actionfont = QtWidgets.QAction(Editor)
        self.actionfont.setObjectName("actionfont")
        self.actioncolor = QtWidgets.QAction(Editor)
        self.actioncolor.setObjectName("actioncolor")
        self.actionsearch = QtWidgets.QAction(Editor)
        self.actionsearch.setObjectName("actionsearch")
        self.aleft = QtWidgets.QAction(Editor)
        self.aleft.setObjectName("aleft")
        self.amid = QtWidgets.QAction(Editor)
        self.amid.setObjectName("amid")
        self.aright = QtWidgets.QAction(Editor)
        self.aright.setObjectName("aright")
        self.menu.addAction(self.action_new)
        self.menu.addAction(self.action_open)
        self.menu.addAction(self.action_save)
        self.menu.addAction(self.action_saveas)
        self.menu.addSeparator()
        self.menu.addAction(self.action_close)
        self.menu_2.addAction(self.actioncut)
        self.menu_2.addAction(self.actioncopy)
        self.menu_2.addAction(self.actionpaste)
        self.menu_2.addSeparator()
        self.menu_2.addAction(self.actionfont)
        self.menu_2.addAction(self.actioncolor)
        self.menu_2.addSeparator()
        self.menu_2.addAction(self.actionsearch)
        self.menu_3.addAction(self.actionpile)
        self.menu_3.addAction(self.actionhori)
        self.menu_3.addAction(self.actionverti)
        self.menu_4.addAction(self.action_about)
        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.menu_2.menuAction())
        self.menubar.addAction(self.menu_3.menuAction())
        self.menubar.addAction(self.menu_4.menuAction())

        self.retranslateUi(Editor)
        QtCore.QMetaObject.connectSlotsByName(Editor)

        self.action_init()
        self.toolbar_init()

        self.connector()

    def retranslateUi(self, Editor):
        _translate = QtCore.QCoreApplication.translate
        Editor.setWindowTitle(_translate("Editor", "TextEditor"))
        self.menu.setTitle(_translate("Editor", "文件"))
        self.menu_2.setTitle(_translate("Editor", "编辑"))
        self.menu_3.setTitle(_translate("Editor", "视图"))
        self.menu_4.setTitle(_translate("Editor", "帮助"))
        self.toolBar.setWindowTitle(_translate("Editor", "toolBar"))
        self.action_new.setText(_translate("Editor", "新建"))
        self.action_open.setText(_translate("Editor", "打开"))
        self.action_save.setText(_translate("Editor", "保存"))
        self.action_saveas.setText(_translate("Editor", "另存为..."))
        self.action_close.setText(_translate("Editor", "关闭"))
        self.action_about.setText(_translate("Editor", "关于"))
        self.actionpile.setText(_translate("Editor", "级联显示"))
        self.actionhori.setText(_translate("Editor", "水平铺展"))
        self.actionverti.setText(_translate("Editor", "垂直铺展"))
        self.actioncut.setText(_translate("Editor", "剪切"))
        self.actioncopy.setText(_translate("Editor", "复制"))
        self.actionpaste.setText(_translate("Editor", "粘贴"))
        self.actionfont.setText(_translate("Editor", "字体"))
        self.actioncolor.setText(_translate("Editor", "颜色"))
        self.actionsearch.setText(_translate("Editor", "查找替换"))
        self.aleft.setText(_translate("Editor", "左对齐"))
        self.amid.setText(_translate("Editor", "居中对齐"))
        self.aright.setText(_translate("Editor", "右对齐"))

    # 菜单栏初始化
    def action_init(self):
        self.action_new.setIcon(QIcon('image/new.ico'))
        self.action_new.setShortcut('Ctrl+N')
        self.action_new.setToolTip('新建')
        self.action_new.setStatusTip('新建文件')
        self.action_new.triggered.connect(self.new_fun)

        self.action_open.setIcon(QIcon('image/open.png'))
        self.action_open.setShortcut('Ctrl+O')
        self.action_open.setToolTip('打开')
        self.action_open.setStatusTip('打开文件')
        self.action_open.triggered.connect(self.new_fun)

        self.action_save.setIcon(QIcon('image/save.ico'))
        self.action_save.setShortcut('Ctrl+S')
        self.action_save.setToolTip('保存')
        self.action_save.setStatusTip('保存文件')
        self.action_save.triggered.connect(self.save_fun)

        self.action_saveas.setIcon(QIcon('image/save_as.ico'))
        self.action_saveas.setStatusTip('保存文件')
        self.action_saveas.triggered.connect(self.saveas_fun)

        self.action_close.setIcon(QIcon('image/close.png'))

        self.actioncut.setIcon(QIcon('image/cut.png'))
        self.actioncut.setShortcut('Ctrl+X')
        self.actioncut.setToolTip('剪切')
        self.actioncut.setStatusTip('剪切选中部分')
        self.actioncut.triggered.connect(self.cut_fun)

        self.actioncopy.setIcon(QIcon('image/copy.png'))
        self.actioncopy.setShortcut('Ctrl+C')
        self.actioncopy.setToolTip('复制')
        self.actioncopy.setStatusTip('复制选中部分')
        self.actioncopy.triggered.connect(self.save_fun)

        self.actionpaste.setIcon(QIcon('image/paste.png'))
        self.actionpaste.setShortcut('Ctrl+V')
        self.actionpaste.setToolTip('粘贴')
        self.actionpaste.setStatusTip('粘贴文字')
        self.actionpaste.triggered.connect(self.paste_fun)

        self.actionpile.setIcon(QIcon('image/平铺.png'))
        self.actionpile.setStatusTip('级联展示')
        # self.actionpaste.triggered.connect(self.)

        self.actionverti.setIcon(QIcon('image/横向布局.png'))
        self.actionverti.setStatusTip('水平展示')
        # self.actionpaste.triggered.connect(self.)

        self.actionhori.setIcon(QIcon('image/竖向布局.png'))
        self.actionhori.setStatusTip('垂直展示')
        # self.actionpaste.triggered.connect(self.)

        self.aleft.setIcon(QIcon('image/左对齐.png'))
        self.aleft.setToolTip('左对齐')
        self.aleft.setStatusTip('左对齐')
        self.aright.setIcon(QIcon('image/右对齐.png'))
        self.aright.setToolTip('右对齐')
        self.aright.setStatusTip('右对齐')
        self.amid.setIcon(QIcon('image/居中.png'))
        self.amid.setToolTip('居中对齐')
        self.amid.setStatusTip('居中对齐')

        self.actioncolor.setIcon(QIcon('image/color.ico'))
        self.actioncolor.setToolTip('颜色')
        self.actioncolor.setStatusTip('设置颜色')

        self.actionfont.setIcon(QIcon('image/font.png'))
        self.actionfont.setToolTip('字体')
        self.actionfont.setStatusTip('设置字体')

        self.actionsearch.setIcon(QIcon('image/font.png'))
        self.actionsearch.setToolTip('查找替换')
        self.actionsearch.setStatusTip('查找替换')

        self.action_about.setIcon(QIcon('image/作者.png'))
        self.action_about.setStatusTip('关于')

    # 工具栏初始化
    def toolbar_init(self):
        self.toolBar.addActions([self.action_new, self.action_open, self.action_save])
        self.toolBar.addActions([self.actionfont, self.actioncolor])

        self.toolBar.addActions([self.aleft, self.amid, self.aright])
        self.toolBar.addActions([self.actioncut, self.actioncopy, self.actionpaste])
        self.toolBar.addActions([self.actionsearch])

    def connector(self):
        self.action_close.triggered.connect(MainWindow.close)

    def new_fun(self):
        pass

    def open_fun(self):
        pass

    def save_fun(self):
        pass

    def saveas_fun(self):
        pass

    def copy_fun(self):
        pass

    def cut_fun(self):
        pass

    def paste_fun(self):
        pass


if __name__ == '__main__':
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_Editor()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
